#!/usr/bin/env bash

# move_and_open_source.sh
# Script to move a folder, create a new GitHub repo, and add it back as a submodule

# Exit on any error
set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

# Usage function
usage() {
    echo "Usage: $0 <source_folder> <destination_folder> <repo_name> <visibility>"
    echo "  source_folder: Path to the folder to move (e.g., ~/code/my-lib)"
    echo "  destination_folder: Path to move the folder to (e.g., ~/code)"
    echo "  repo_name: Name of the new GitHub repository"
    echo "  visibility: 'public' or 'private'"
    exit 1
}

# Validate inputs
validate_inputs() {
    if [ -z "$source_folder" ] || [ -z "$dest_folder" ] || [ -z "$repo_name" ] || [ -z "$visibility" ]; then
        log_error "All arguments are required"
        usage
    fi

    if [ ! -d "$source_folder" ]; then
        log_error "Source folder '$source_folder' does not exist"
        exit 1
    fi

    if [ ! -d "$dest_folder" ]; then
        log_error "Destination folder '$dest_folder' does not exist"
        mkdir -p "$dest_folder"
    fi

    if [[ "$visibility" != "public" && "$visibility" != "private" ]]; then
        log_error "Visibility must be 'public' or 'private'"
        usage
    fi

    # Check if gh CLI is installed
    if ! command -v gh &> /dev/null; then
        log_error "GitHub CLI (gh) is not installed. Please install it: https://cli.github.com/"
        exit 1
    fi

    # Check if git is installed
    if ! command -v git &> /dev/null; then
        log_error "Git is not installed. Please install it."
        exit 1
    fi
}

# Main function
main() {
    # Assign arguments
    source_folder="$1"
    dest_folder="$2"
    repo_name="$3"
    visibility="$4"

    # Normalize paths
    source_folder=$(realpath "$source_folder")
    dest_folder=$(realpath "$dest_folder")
    folder_name=$(basename "$source_folder")

    # Validate inputs
    validate_inputs

    # Check if destination already contains a folder with the same name
    new_location="$dest_folder/$folder_name"
    if [ -d "$new_location" ]; then
        log_error "Destination already contains a folder named '$folder_name'"
        exit 1
    fi

    log_info "Moving '$source_folder' to '$new_location'..."
    mv "$source_folder" "$new_location"

    # Change to the new location
    cd "$new_location" || { log_error "Failed to change to '$new_location'"; exit 1; }

    # Initialize a new Git repository if not already a repo
    if [ ! -d ".git" ]; then
        log_info "Initializing new Git repository..."
        git init
        git add .
        git commit -m "Initial commit" || { log_warning "No files to commit"; }
    else
        log_info "Existing Git repository found. Using it."
    fi

    # Create a new GitHub repository using gh CLI
    log_info "Creating $visibility GitHub repository '$repo_name'..."
    gh repo create "$repo_name" --"$visibility" --source=. --push || {
        log_error "Failed to create GitHub repository"
        exit 1
    }

    # Get the repository URL
    repo_url=$(gh repo view --json url -q .url)
    log_info "Repository created at $repo_url"

    # Push the code to the remote repository
    log_info "Pushing code to remote repository..."
    git push -u origin main || { log_error "Failed to push to remote"; exit 1; }

    # Return to the parent of the original source folder
    source_parent=$(dirname "$source_folder")
    cd "$source_parent" || { log_error "Failed to change to '$source_parent'"; exit 1; }

    # Check if the parent is a Git repository
    if [ ! -d ".git" ]; then
        log_warning "Parent directory '$source_parent' is not a Git repository. Initializing one..."
        git init
    fi

    # Add the new repository as a submodule
    log_info "Adding '$repo_url' as a submodule at '$folder_name'..."
    git submodule add "$repo_url" "$folder_name" || {
        log_error "Failed to add submodule"
        exit 1
    }

    # Commit the submodule addition
    log_info "Committing submodule addition..."
    git add .gitmodules "$folder_name"
    git commit -m "Add $repo_name as submodule at $folder_name" || {
        log_error "Failed to commit submodule"
        exit 1
    }

    # Push the parent repository changes
    if git remote | grep -q origin; then
        log_info "Pushing parent repository changes..."
        git push origin main || log_warning "Failed to push parent repo changes. Please push manually."
    else
        log_warning "Parent repository has no remote. Skipping push."
    fi

    log_info "Process completed successfully!"
    log_info "New repository: $repo_url"
    log_info "Submodule added at: $source_parent/$folder_name"
}

# Check for help flag or insufficient arguments
if [[ "$1" == "-h" || "$1" == "--help" || $# -ne 4 ]]; then
    usage
fi

# Run main function with arguments
main "$@"
